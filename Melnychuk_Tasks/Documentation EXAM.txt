//////////////////////////////////////////////////////////////////////
////////////////////////Назва проекта(рішення)////////////////////////
//////////////////////////////////////////////////////////////////////

Solution EXAM

//////////////////////////////////////////////////////////////////////
////////////////////////Вміст проекта/////////////////////////////////
//////////////////////////////////////////////////////////////////////

Проект містить:
	-11 класів,
	-2 енама,
	-8 методів,
	-1 інтерфейс.

*проект містить використання делагата, наслідування, поліморфізм, колекції,інтерфейс.

*програма не містить строгих перевірок при введені значень.
//////////////////////////////////////////////////////////////////////
////////////////////////Пояснення інтерфейсів/////////////////////////
//////////////////////////////////////////////////////////////////////

 public interface IEditor - публічний інтерфейс який має 1 метод -  void Edit().

//////////////////////////////////////////////////////
/////////////////////////Enums////////////////////////
//////////////////////////////////////////////////////


public enum Names-збірка імен.

public enum Surnames-збірка прізвищ.

//////////////////////////////////////////////////////////////////////
////////////////////////Пояснення класів//////////////////////////////
//////////////////////////////////////////////////////////////////////
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
public abstract class Person
	-батьківсікий абстрактний клас для класів "Client" та "Master" який наслідує інтерфейс "IEditor".
Містить в собі:
	-властивості(4)
		•string Name - ім'я.
		•string Surname - прізвище.
		•string PhoneNumber - номер телефону.
		•string Type - тип персони, "Client" або "Master".
	-методи(2)
		•Edit() - міняємо дані персони. 
		•PrintInfo() - виводимо інформацію про персону.
	-конструктори
		•Person() - створення об'єкту типу Person, присвоюючи рандомне ім'я,прізвище,номер.
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
public class Client
	-клас нащадок від "Person".
Містить в собі:
	-властивості(5)
		•int Money - кількість коштів.
	-методи(2)
		•Edit() - викликає базовий метод, та змінює кількість коштів.
	-конструктори
		•Client(int money) - створення об'єкту типу Client.
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
public class Master
	-клас нащадок від "Person".
Містить в собі:
	-властивості(4)
		•int Rank - ранг майстра.
	-методи(3)
		•Work() - імітує роботу.
		•Edit() - викликає базовий метод, та змінює ранг.
	-конструктори
		•Master(int rank) - створення об'єкту типу Master.
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
public  class Product
	-клас який описує продукт та наслідує інтерфейс "IEditor".
Містить в собі:
	-властивості(2)
		•string Name - ім'я продукту.
		•int Price - ціна продукту.
	-методи(2)
		•Edit() - зміна властивостей продукту.
		•PrintInfo() - виводить інформацію про об'єкт "Product".
	-конструктори
		•Product(string name,int price) - конструктор об'єкта "Product". 
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
public abstract class Service
	-батьківсікий абстрактний клас для класів:"Haircut", "Coloring","Manicure","CosmeticProcedure". який наслідує інтерфейс "IEditor".
Містить в собі:
	-властивості(3)
		•string Name - ім'я.
		•string Type - тип процедури.
		•int Price - ціна процедури.
	-методи(2)
		•Edit() - зміна властивостей.
		•PrintInfo() - виводить інформацію про об'єкт "Service".
	-конструктори
		•Service(string name, int price, string type) - конструктор об'єкта "Service".
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
class Haircut
	-наслідує клас "Service".
Містить в собі:
	-методи(2)
		•Edit() - зміна властивостей.
		•PrintInfo() - виводить інформацію про об'єкт "Haircut".
	-конструктори
		• public Haircut(string type, int price) : base("Стрижка", price, type) - конструктор об'єкта "Haircut".
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
class Coloring
	-наслідує клас "Service".
Містить в собі:
	-методи(2)
		•Edit() - зміна властивостей.
		•PrintInfo() - виводить інформацію про об'єкт "Coloring".
	-конструктори
		• public Coloring(string type, int price) : base("Фарбування", price, type) - конструктор об'єкта "Coloring".
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
class Manicure
	-наслідує клас "Service".
Містить в собі:
	-властивості(3)
		•string AdditionalServices - додаткові послуги.
	-методи(2)
		•Edit() - зміна властивостей.
		•PrintInfo() - виводить інформацію про об'єкт "Manicure".
	-конструктори
		• public Manicure(string type, int price, string additionalServices) : base("Манікюр", price, type) - конструктор об'єкта "Manicure".
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
class CosmeticProcedure
	-наслідує клас "Service".
Містить в собі:
	-властивості(3)
		•int Duration - тривалість процедури.
	-методи(2)
		•Edit() - зміна властивостей.
		•PrintInfo() - виводить інформацію про об'єкт "CosmeticProcedure".
	-конструктори
		•public CosmeticProcedure(string type, int duration, int price) : base("Косметична процедура", price, type) - конструктор об'єкта "CosmeticProcedure".
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
public class Order 
	-клас для створення замовлення.
Містить в собі:
	-властивості(4)
		•Client Client - клієнт.
		•Service Service - процедура.
		•DateTime Date - дата.
		•Master Performer - майстер.
	-методи(2)
		•Work() - імітація виконання процедури та списання коштів.
		•PrintInfo() - виводить інформацію про об'єкт "Order".
	-конструктори
		•public Order(Client client, Service service, DateTime date, Master performer) - конструктор об'єкта "Order".
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
public class BeautySalon 
	- це клас для управління салоном краси.
Містить в собі:
	-властивості(5)
		•string Name - назва салону.
		•List<Person> Persons - список об'єктів типу Person.
		•List<Product> Products - список об'єктів типу Product.
		•List<Service> Services - список об'єктів типу Service.
		•List<Order> Orders - список об'єктів типу Order.
	-методи(13)
		•ShowItems<T>(List<T> items, Action<T> printMethod) - метод в якому використовується делегат Action, для виведення списка об'єктів типу T.
		•ShowPerson() - показує список ліста Persons.
		•AddPerson() - додає до ліста Persons об'єкт типу Person.
		•RemovePerson() - видаляє з ліста Persons об'єкт типу Person.
		•ShowProduct() - показує список ліста Products.
		•AddProduct() - додає до ліста Products об'єкт типу Product.
		•RemoveProduct() - видаляє з ліста Products об'єкт типу Product.
		•ShowService() - показує список ліста Services.
		•AddService() - додає до ліста Services об'єкт типу Service.
		•RemoveService() - видаляє з ліста Services об'єкт типу Service.
		•ShowOrder() - показує список ліста Order.
		•AddOrder() - додає до ліста Orders об'єкт типу Order.
		•RemoveOrder() - видаляє з ліста Orders об'єкт типу Order.
	-конструктори
		•Конструктор за замовчуванням.
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

//////////////////////////////////////////////////////////////////    
////////////////////////Пояснення Методів(9)//////////////////////
//////////////////////////////////////////////////////////////////

	۞•public static void Greeting(ref BeautySalon beauty) - метод який запускає створення та роботу нашої перукарні, та викликає метод BarberShopInterface для подальшої роботи. 

	۞•public static int Show(ref BeautySalon beauty) - метод який реалізовує меню вибору ліста для показу, якщо введемно 0 то повернемось назад.

	۞•public static int BarberShopInterface(ref BeautySalon beauty) - метод який реалізує меню вибору дії.

	۞•public static int Index() - метод для вводу зміної, щоб зменшити код.

	۞•public static int Adder(ref BeautySalon beauty) - метод який реалізує додавання новий об'єктів.

	۞•public static int Remover(ref BeautySalon beauty) - метод який реалізує видалення об'єктів.

	۞•public static int Editor(ref BeautySalon beauty) - метод який реалізує редагування об'єктів.

	۞•public static void Wait() - метод для очікування дій.

	۞•static void Main(string[] args) - головний метод, для запуску програми.

//////////////////////////////////////////////////////////////////    
//////////////////////// Логіка програми /////////////////////////
//////////////////////////////////////////////////////////////////

*підпункти це орієнтирт, якщо був підпункт 2 то наступний буде також 2, приклад: 7.2 -> 8.2


	1 - У Main створюємо екземпляр класу BeautySalon.
	2 - Викликаємо метод Greeting та передаємо екземляр класу BeautySalon створений раніше.
	3 - Заповнюємо нашу "перукарню" через консоль.
	4 - попадаємо в меню вибору дії, в BarberShopInterface.
	5 - вводимо через консоль номер дії
		6 - дія:
			-6.1 - Відкриття переліку списків об'єктів.
			-6.2 - Додавання нових об'єктів.
			-6.3 - Редагування об'єктів.
			-6.4 - Видалення об'єктів.
			-6.5 - Виконання замовлення.
			-6.6 - Завершення роботи програми.
				7 - виконання дії вибраної в попередньому пункті:
					7.1 - відкривається меню для вибору ліста для подальшого його перегляду, Show().
					7.2 - відкривається меню для вибору ліста для подальшого додавання в нього об'єкту, Adder().
					7.3 - відкривається меню для вибору ліста для подальшого редагування в ньому об'єкту, Editor().
					7.4 - відкривається меню для вибору ліста для подальшого видалення в ньому об'єкту, Remover().
					7.5 - відкривається меню для вибору замовлення в лісті для подальшого його виконання. 
					7.6 - Вихід з програми.
						8 - Виконання дії:
							8.1 - після вибору номеру ліста, виводиться вибраний ліст, після перегляду повертає назад.
							8.2 - після вибору номеру ліста, виводиться вибраний ліст, додається новий елемент ліста, після цього всього повертає назад.
							8.3 - після вибору номеру ліста, виводиться вибраний ліст, редагується вибраний елемент, після цього всього повертає назад.
							8.4 - після вибору номеру ліста, виводиться вибраний ліст, видаляється вибраний елемент, після цього всього повертає назад.
							8.5 - виконується замовлення, повертає назад.


			
		